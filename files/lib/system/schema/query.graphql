extend type Query {
  article(id: ID!): Article
  articles(first: Int = 20, skip: Int = 0): [Article]
  language(id: ID!): Language
  languages(first: Int = 20, skip: Int = 0): [Language]
  ping: String
  user(id: ID!): User
  users(first: Int = 20, skip: Int = 0): [User]
}

extend type Mutation {
  generateToken(key: String, secret: String, type: String = "shotlife"): Token
}

type Token {
  value: String
  type: String
  validUntil: Int
  createdAt: Int
}

type Article {
  articleID: ID!
  category: Category
  # comments
  cumulativeLikes: Int
  enableComments: Boolean
  hasLabels: Boolean
  isDeleted: Boolean
  isMultilingual: Boolean
  publicationDate: Int
  publicationStatus: Int
  time: Int
  title: String!
  teaser: String
  user: User
  views: Int
}

type Category {
  categoryID: ID!
  description: String
  descriptionUseHtml: Boolean
  isDisabled: Boolean
  # objectTypeID
  parent: Category
  showOrder: Int
  time: Int
  title: String
}
type User {
  userID: ID!
  username: String!
  email: String!
  language: Language!
}

type Language {
  languageID: ID!
  languageCode: String!
  languageName: String!
  countryCode: String!
  isDefault: Boolean
  hasContent: Boolean
  isDisabled: Boolean
}